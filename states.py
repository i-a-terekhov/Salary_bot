from aiogram.fsm.state import StatesGroup, State


class Registration(StatesGroup):
    # Условия, выполненные на предыдущем шаге в состоянии None:
    # - введено что-либо в чат и user_id отсутствует в БД
    waiting_for_employee_code = State()
    waiting_for_secret_employee_code = State()
    employee_is_registered = State()
    employee_is_banned = State()
    # Выводим первичное приветственное сообщение.
    # Ожидаем любой ввод (зарплатный файл или "секретный код сотрудника" или случайное сообщение)
    # > если файл корректный, заносим данного юзера в БД как босса -> waiting_for_access_summ
    # > если код сотрудника подвергается дешифровке и полученный ID входит в диапазон
    #   допустимых -> вносим юзера в БД, проверяем, есть ли ЗП у такого ID
    # > если файл некорректный -> остаемся в этом состоянии, сообщаем о некорректности ввода
    # > если код сотрудника не дешифруется -> остаемся в этом состоянии, сообщаем о некорректности ввода
    # > если прочее -> остаемся в этом состоянии, сообщаем о некорректности ввода


# Ветка босса
class BossHere(StatesGroup):
    # Условия, выполненные на предыдущем шаге в состоянии waiting_for_start:
    # - был внесен корректный ЗП файл, user_id внесен в БД как босс
    waiting_for_access_summ = State()
    # Выводим сообщение о том, что удалось найти в файле такие-то зарплаты,
    # выводим суммы для проверки и ожидаем подтверждение сумм
    # > если суммы подтверждены -> creating_a_secret_code
    # > если "отмена" -> waiting_for_bosses_start

    # Условия, выполненные на предыдущем шаге в состоянии waiting_for_access_summ:
    # - суммы подтверждены
    creating_a_secret_code = State()
    # Просим ввести уникальный для данной рассылки код зарплаты, проверяем его на корректность, либо откатываемся назад
    # > если код соответствует требованиям безопасности -> confirmation_of_filling
    # > если код не соответствует требованиям безопасности -> остаемся в этом состоянии, сообщаем о некорректности ввода
    # > если "отмена" -> waiting_for_bosses_start

    # Условия, выполненные на предыдущем шаге в состоянии creating_a_secret_code:
    # - для текущей рассылки создан уникальный код
    confirmation_of_filling = State()
    # Данные переносим в БД, дополняем следующей информацией:
    # - назначен "босс" (ткущий user_id для каждого из ЗП-списка)
    # - назначен "код зарплаты" (удовлетворяющий безопасности)
    # - сотрудникам из ЗП-файла назначен в базе "секретный код сотрудника", сотрудники
    # Данные из БД рассылаем сотрудникам, у которых заполнено поле user_id, в качестве босса стоит босс,
    # Выводим статистику рассылки по сотрудникам
    # Переходим -> waiting_for_bosses_start

    # Условия, выполненные на предыдущем шаге:
    # - данный user_id находится в БД как босс
    waiting_for_bosses_start = State()
    # Выводим сообщение об ожидании ЗП-файла и ожидаем ввод (зарплатный файл)
    # > если файл корректный -> waiting_for_access_summ
    # > если файл некорректный -> остаемся в этом состоянии, сообщаем о некорректности ввода
    # > если нажата кнопка "проверить текущие данные в БД" -> выводим таблицу с залитыми данными по сотрудникам,
    #   у которых босс - текущий user_id (либо пусто, если данных нет)


class DeleteCommon(StatesGroup):
    waiting_for_delete_start = State()
